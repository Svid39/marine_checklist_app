import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:marine_checklist_app/generated/l10n.dart';

import '../main.dart';
import '../models/user_profile.dart';
import 'dashboard_screen.dart';

/// –≠–∫—Ä–∞–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
///
/// –†–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:
/// - –†–µ–∂–∏–º –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (`isFirstRun = true`), –≥–¥–µ –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.
/// - –†–µ–∂–∏–º –æ–±—ã—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (`isFirstRun = false`), –∫—É–¥–∞ –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
class AppSettingsScreen extends StatefulWidget {
  /// –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
  final bool isFirstRun;

  const AppSettingsScreen({
    super.key,
    this.isFirstRun = false,
  });

  @override
  State<AppSettingsScreen> createState() => _AppSettingsScreenState();
}

class _AppSettingsScreenState extends State<AppSettingsScreen> {
  /// "–Ø—â–∏–∫" Hive –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  late Box<UserProfile> _profileBox;
  /// "–†–∞–±–æ—á–∏–π" –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ.
  UserProfile _userProfile = UserProfile();
  /// –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
  bool _isLoading = true;

  final _formKey = GlobalKey<FormState>();

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  final _nameController = TextEditingController();
  final _positionController = TextEditingController();
  final _shipNameController = TextEditingController();
  final _captainNameController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _profileBox = Hive.box<UserProfile>(userProfileBoxName);
    _loadProfileData();
  }

  @override
  void dispose() {
    _nameController.dispose();
    _positionController.dispose();
    _shipNameController.dispose();
    _captainNameController.dispose();
    super.dispose();
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ Hive –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π.
  Future<void> _loadProfileData() async {
    if (!mounted) return;
    setState(() => _isLoading = true);

    final existingProfile = _profileBox.get(1);
    if (existingProfile != null) {
      _userProfile = existingProfile;
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    _nameController.text = _userProfile.name ?? '';
    _positionController.text = _userProfile.position ?? '';
    _shipNameController.text = _userProfile.shipName ?? '';
    _captainNameController.text = _userProfile.captainName ?? '';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –≤ Dropdown. –ï—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'en'.
    // –ú—ã —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ main.dart –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    _userProfile.languageCode ??= 'en';


    if (mounted) {
      setState(() => _isLoading = false);
    }
  }

  /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ Hive.
  Future<void> _saveSettings() async {
    if (!(_formKey.currentState?.validate() ?? false)) {
      return;
    }
    _formKey.currentState!.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º "—Ä–∞–±–æ—á–∏–π" –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤.
    _userProfile.name = _nameController.text.trim();
    _userProfile.position = _positionController.text.trim();
    _userProfile.shipName = _shipNameController.text.trim();
    _userProfile.captainName = _captainNameController.text.trim();

    try {
      await _profileBox.put(1, _userProfile);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Å–º–µ–Ω–µ —è–∑—ã–∫–∞.
      localeNotifier.value = Locale(_userProfile.languageCode ?? 'en');

      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(S.of(context).settingsSaved),
          backgroundColor: Colors.green,
        ),
      );

      if (widget.isFirstRun) {
        // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è.
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const DashboardScreen()),
        );
      } else {
        // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        Navigator.pop(context);
      }
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(S.of(context).errorSavingProfile(e.toString())),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.isFirstRun
              ? S.of(context).profileSetup
              : S.of(context).appSettings,
        ),
        automaticallyImplyLeading: !widget.isFirstRun,
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            tooltip: S.of(context).save,
            onPressed: _isLoading ? null : _saveSettings,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _buildForm(),
    );
  }

  /// –°—Ç—Ä–æ–∏—Ç –≤–∏–¥–∂–µ—Ç —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.
  Widget _buildForm() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text(S.of(context).yourName, style: const TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 4),
            TextFormField(
              controller: _nameController,
              textCapitalization: TextCapitalization.words,
              decoration: InputDecoration(
                hintText: S.of(context).yourNameHint,
                border: const OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return S.of(context).nameCannotBeEmpty;
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            Text(S.of(context).yourPosition, style: const TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 4),
            TextFormField(
              controller: _positionController,
              textCapitalization: TextCapitalization.sentences,
              decoration: InputDecoration(
                hintText: S.of(context).yourPositionHint,
                border: const OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return S.of(context).positionCannotBeEmpty;
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            Text(S.of(context).defaultVesselName, style: const TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 4),
            TextFormField(
              controller: _shipNameController,
              textCapitalization: TextCapitalization.words,
              decoration: InputDecoration(
                hintText: S.of(context).defaultVesselNameHint,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            Text(S.of(context).captainNameForReports, style: const TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 4),
            TextFormField(
              controller: _captainNameController,
              textCapitalization: TextCapitalization.words,
              decoration: InputDecoration(
                hintText: S.of(context).captainNameHint,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 24),
            Text(
              S.of(context).appLanguage,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 4),
            DropdownButtonFormField<String>(
              value: _userProfile.languageCode,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
              ),
              items: const [
                DropdownMenuItem(value: 'ru', child: Text('–†—É—Å—Å–∫–∏–π üá∑üá∫')),
                DropdownMenuItem(value: 'en', child: Text('English üá¨üáß')),
              ],
              onChanged: (String? newValue) {
                if (newValue != null) {
                  setState(() {
                    _userProfile.languageCode = newValue;
                  });
                }
              },
            ),
          ],
        ),
      ),
    );
  }
}

